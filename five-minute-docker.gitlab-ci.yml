stages:
    - build
    - deploy
    - destroy

variables:
    TF_VAR_AWS_ACCESS_KEY: ${AWS_ACCESS_KEY}
    TF_VAR_AWS_SECRET_KEY: ${AWS_SECRET_KEY}
    TF_VAR_AWS_REGION: ${AWS_REGION}
    TF_VAR_ENVIRONMENT_NAME: ${CI_PROJECT_PATH_SLUG}_${CI_PROJECT_ID}_${CI_COMMIT_REF_SLUG}
    TF_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/${CI_COMMIT_REF_SLUG}

cache:
    paths:
        - .terraform

Docker Build:
    stage: build
    image: docker:stable
    services:
        - docker:stable-dind
    variables:
        IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    script:
        - docker login --username $CI_REGISTRY_USER --password $CI_REGISTRY_PASSWORD $CI_REGISTRY_IMAGE
        - docker build . --tag $IMAGE_TAG
        - docker push $IMAGE_TAG

AWS Provision:
    stage: build
    image: registry.gitlab.com/gitlab-org/terraform-images/stable:latest
    resource_group: terraform
    script:
        - wget https://gitlab.com/gitlab-org/creator-pairing/5-minute-prod-app/sri-stuff/five-minute-docker/-/raw/master/infra.tf
        - gitlab-terraform init
        - gitlab-terraform plan
        - gitlab-terraform plan-json
        - gitlab-terraform apply
    artifacts:
        paths:
            - infra.tf
        reports:
            terraform: plan.json

Deploy App:
    stage: deploy
    image: registry.gitlab.com/gitlab-org/terraform-images/stable:latest
    script:
        - wget https://gitlab.com/gitlab-org/creator-pairing/5-minute-prod-app/sri-stuff/five-minute-docker/-/raw/master/deploy.sh
        - chmod a+x deploy.sh
        - ./deploy.sh
    artifacts:
        reports:
            dotenv: deploy.env
    environment:
        name: $CI_COMMIT_REF_SLUG
        url: http://$DYNAMIC_ENVIRONMENT_URL

Destroy:
    stage: destroy
    image: registry.gitlab.com/gitlab-org/terraform-images/stable:latest
    when: manual
    script:
        - gitlab-terraform destroy -auto-approve
